{"version":3,"sources":["webpack://jupyterlab-notifications/./lib/card.js","webpack://jupyterlab-notifications/./lib/index.js","webpack://jupyterlab-notifications/./lib/useStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAA0B;AAC4B;AACZ;AACoB;AACN;AACF;AACtD,kBAAkB,iEAAU;AAC5B;AACA;AACA;AACA,CAAC;AACc;AACf;AACA,YAAY,0DAAmB,CAAC,2DAAI,GAAG,0BAA0B;AACjE,QAAQ,0DAAmB,CAAC,qEAAc;AAC1C,YAAY,0DAAmB,CAAC,kEAAW;AAC3C,gBAAgB,0DAAmB,CAAC,iEAAU,GAAG,qDAAqD;AACtG,gBAAgB,0DAAmB,CAAC,iEAAU,GAAG,2DAA2D;AAC5G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClB8C;AACpB;AACyB;AACnD,WAAW,cAAc;AACkB;AACQ;AACnD,WAAW,wBAAwB;AACY;AAC/C;AACuD;AACrB;AACc;AAChD;AACkC;AACqC;AACvE,WAAW,kBAAkB;AACwB;AACrD,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,+DAAa;AAC1C;AACA;AACA;AACA;AACA,4BAA4B,mDAAQ;AACpC,gBAAgB,mDAAQ,EAAE,kCAAkC;AAC5D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA;AACA;AACA,2BAA2B,gEAAc,EAAE,UAAU;AACrD;AACA;AACA,4BAA4B,yEAAwB;AACpD,wCAAwC,YAAY;AACpD,wBAAwB,kDAAa;AACrC;AACA,2BAA2B,+DAAc;AACzC,0CAA0C,SAAS;AACnD,sCAAsC,YAAY;AAClD;AACA;AACA;AACA,QAAQ,kFAAgC;AACxC,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAQ;AAC1C,oBAAoB,mDAAQ,EAAE,kCAAkC;AAChE;AACA;AACA;AACA;AACA,0GAA0G,qBAAqB;AAC/H;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAW;AAClC;AACA;AACA;AACA;AACA;AACA,mCAAmC,YAAY,eAAe,YAAY;AAC1E;AACA,gBAAgB,0DAAmB;AACnC,YAAY,0DAAmB,sBAAsB,gBAAgB;AACrE;AACA;AACA,WAAW,SAAS;AACpB;AACA,8BAA8B,kDAAQ;AACtC,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA,kBAAkB,kCAAkC;AACpD;AACA,YAAY,0DAAmB;AAC/B,iCAAiC,0DAAmB,CAAC,0CAAY,GAAG,eAAe;AACnF,QAAQ,0DAAmB,YAAY,+BAA+B;AACtE;AACA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA;AACA,6BAA6B,gBAAgB,oBAAoB,EAAE;AACnE,QAAQ;AACR;AACA;AACA;AACA;AACA,6BAA6B,gBAAgB,6BAA6B,EAAE;AAC5E,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;ACjLsB;AACrC,aAAa;AACpB;AACA,uBAAuB,uBAAuB;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,2BAA2B;AAC3B;AACA;AACA,eAAe;AACf,IAAI;AACW;AACf,qBAAqB,+CAAQ;AAC7B,IAAI,gDAAS;AACb;AACA;AACA,KAAK;AACL;AACA","file":"lib_index_js-webpack_sharing_consume_default_react-dom.d489e492dabbb7879d22.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345\n    }\n});\nexport default function ImgMediaCard(props) {\n    const classes = useStyles();\n    return (React.createElement(Card, { className: classes.root },\n        React.createElement(CardActionArea, null,\n            React.createElement(CardContent, null,\n                React.createElement(Typography, { gutterBottom: true, variant: \"h5\", component: \"h2\" }, props.title),\n                React.createElement(Typography, { variant: \"body2\", color: \"textSecondary\", component: \"p\" }, props.body)))));\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\n// import { InputDialog } from '@jupyterlab/apputils';\nimport * as Widgets from '@lumino/widgets';\nimport * as Icons from '@jupyterlab/ui-components';\n// import { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// import Toast from 'react-bootstrap/Toast';\nimport { NotebookActions } from '@jupyterlab/notebook';\nimport useStore from \"./useStore\";\nimport { setStore, getStore } from \"./useStore\";\n// const store:React.Dispatch<any>[]  = []\nimport ImgMediaCard from \"./card\";\nimport { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\n// import { NotebookActions } from '@jupyterlab/notebook';\nimport { ToolbarButton } from '@jupyterlab/apputils';\n// import { List } from '@material-ui/core';\nfunction customnotify(title, desc, url) {\n    if (Notification.permission !== 'granted') {\n        Notification.requestPermission();\n    }\n    else {\n        const notification = new Notification(title, {\n            icon: 'http://Your_Website.com/logo.png',\n            body: desc\n        });\n        /* Remove the notification from Notification Center when clicked.*/\n        notification.onclick = function () {\n            window.open(url);\n        };\n        /* Callback function when the notification is closed. */\n        notification.onclose = function () {\n            console.log('Notification closed');\n        };\n    }\n}\nclass ButtonExtension {\n    constructor(strEle) {\n        this.strEle = strEle;\n    }\n    createNew(panel, context) {\n        // Create the toolbar button\n        const mybutton = new ToolbarButton({\n            label: 'This one',\n            onClick: () => {\n                console.log(this.strEle);\n                // this.strEle.push(\"ayo\");\n                let store = getStore();\n                setStore({ ls: [...store.ls, \"newElement\"] });\n                document.addEventListener('DOMContentLoaded', () => {\n                    if (Notification.permission !== 'granted') {\n                        Notification.requestPermission();\n                    }\n                });\n                customnotify('myTitle', 'myDesc', 'www.example.com');\n            }\n        });\n        // Add the toolbar button to the notebook toolbar\n        panel.toolbar.insertItem(10, 'mybutton', mybutton);\n        // The ToolbarButton class implements `IDisposable`, so the\n        // button is the extension for the purposes of this method.\n        return mybutton;\n    }\n}\n/**\n * Initialization data for the jupyterlab-todo extension.\n */\nconst plugin = {\n    id: 'jupyterlab-todo:plugin',\n    autoStart: true,\n    requires: [ICommandPalette],\n    activate: async (app, palette) => {\n        let temp = [\"test1\", \"test2\"];\n        const content = new MyWidget(temp);\n        const widget = new MainAreaWidget({ content });\n        widget.id = 'apod-jupyterlab';\n        widget.title.closable = true;\n        widget.title.icon = Icons.jupyterFaviconIcon;\n        app.shell.add(widget, 'right', { rank: 500 });\n        let panel = new Widgets.Panel();\n        panel.id = \"Notifications center\";\n        panel.title.icon = Icons.listIcon;\n        // app.shell.add(panel, 'right', {rank:500});\n        app.shell.add(panel, 'left', { rank: 300 });\n        panel.addClass('my-apodWidget');\n        const your_button = new ButtonExtension(temp);\n        app.docRegistry.addWidgetExtension('Notebook', your_button);\n        NotebookActions.executed.connect((_, args) => {\n            const { cell, notebook } = args;\n            const codeCell = cell.model.type === 'code';\n            const nonEmptyCell = cell.model.value.text.length > 0;\n            const metadata = cell.model.metadata;\n            if (codeCell && nonEmptyCell) {\n                if (metadata.has('execution')) {\n                    const notebookName = notebook.title.label.replace(/\\.[^/.]+$/, '');\n                    const store = getStore();\n                    setStore({ ls: [...store.ls, notebookName] });\n                }\n            }\n            else {\n                alert('Notebook Cell Timing needs to be enabled for Jupyterlab Notifications to work. ' +\n                    'Please go to Settings -> Advanced Settings Editor -> Notebook and update setting to {\"recordTiming\": true}');\n            }\n        });\n    }\n};\n// interface IState {\n//   myStr?: string[];\n// }\nclass MyWidget extends ReactWidget {\n    constructor(arr) {\n        super();\n        this.arr = arr;\n    }\n    render() {\n        // const list = [<App str={this.strEle} />, <App str={this.strEle} />];\n        // List.extend(<App str=\"hello\" />)\n        return (React.createElement(\"div\", null,\n            React.createElement(NotificationCenter, { arr: this.arr })));\n    }\n}\n// import {useState} from 'react';\nfunction NotificationCenter(props) {\n    const [store, setStore] = useStore();\n    // setStore({ls: props.arr});\n    // const [store, setStore]= useState(props.arr);\n    console.log(store.ls + \"this is a test statement\");\n    let handleClick = () => {\n        console.log(store);\n        setStore({ ls: [...store.ls, \"newElement\"] });\n    };\n    return (React.createElement(\"div\", null,\n        store.ls.map((image) => (React.createElement(ImgMediaCard, { title: image }))),\n        React.createElement(\"button\", { onClick: () => handleClick() }, \"Activate Lasers\")));\n}\n// function Button1() {\n//   const [store, setStore] = useStore();\n//   setStore({ls: [...store.ls,  \"newElement\"] });\n//     console.log(store.ls);\n//     //  console.log(store.isFoo + \"this one ss\")\n//   return <button onClick={() => setStore({isFoo: !store.isFoo})}>\n//     {store.ls[0]}\n//     </button>\n// }\n// function Button2() {\n//   const [store, setStore] = useStore();\n//   return <button onClick={() => setStore({isFoo: !store.isFoo, bar: \"\"})}>\n//     {store.isFoo ? \"bar\" : \"foo\"}\n//     </button>\n// }\n// function App(props:any){\n//   // const notify = () => toast(\"Wow so easy!\");\n//   return (\n//     <div style={{ display: 'block',\n//                   width: 700, \n//                   padding: 30 }}>\n//       <h4>React-Bootstrap Toast Component</h4>\n//       <Toast>\n//         <Toast.Header>\n//           <img alt=\"Sample Image\" width=\"20px\"\n// src=\"https://media.geeksforgeeks.org/wp-content/uploads/20210425122739/2-300x115.png\"\n//             className=\"rounded mr-2\" />\n//           <strong className=\"mr-auto\">\n//              Testinggggg\n//           </strong>\n//           <small>\n//              Last Seen: 1 hour ago \n//           </small>\n//         </Toast.Header>\n//         <Toast.Body>\n//              {props.str}\n//         </Toast.Body>\n//       </Toast>\n//     </div>\n//   );\n// }\nexport default plugin;\n","import { useState, useEffect } from \"react\";\nexport let store = { ls: [\"g1\"] };\nlet listeners = [];\n// setStore(store => ({...store, isFoo: false}))\nexport function setStore(val) {\n    if (typeof val === \"object\" && val !== null) {\n        store = val;\n    }\n    else {\n        store = val(store);\n    }\n    store = val;\n    listeners.forEach(l => l(val));\n}\nexport function getStore() {\n    return Object.assign({}, store);\n}\n// setStore(store => {\n//     return {...store }\n// })\nexport default function useStore() {\n    const listener = useState()[1];\n    useEffect(() => {\n        listeners.push(listener);\n        return () => void (listeners = listeners.filter(l => l === listener));\n    }, []);\n    return [store, setStore];\n}\n"],"sourceRoot":""}