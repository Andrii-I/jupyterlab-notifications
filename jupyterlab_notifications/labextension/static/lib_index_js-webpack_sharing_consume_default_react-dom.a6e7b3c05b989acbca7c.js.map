{"version":3,"sources":["webpack://jupyterlab-notifications/./lib/card.js","webpack://jupyterlab-notifications/./lib/index.js","webpack://jupyterlab-notifications/./lib/notifications.js","webpack://jupyterlab-notifications/./lib/useStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAA0B;AAC4B;AACZ;AACoB;AACN;AACF;AACtD,kBAAkB,iEAAU;AAC5B;AACA;AACA;AACA,CAAC;AACc;AACf;AACA,YAAY,0DAAmB,CAAC,2DAAI,GAAG,0BAA0B;AACjE,QAAQ,0DAAmB,CAAC,qEAAc;AAC1C,YAAY,0DAAmB,CAAC,kEAAW;AAC3C,gBAAgB,0DAAmB,CAAC,iEAAU,GAAG,qDAAqD;AACtG,gBAAgB,0DAAmB,CAAC,iEAAU,GAAG,2DAA2D;AAC5G;;;;;;;;;;;;;;;;;;;;;;;;;;;AClB8C;AACpB;AACyB;AACnD,WAAW,cAAc;AACzB;AACmD;AACnD,WAAW,wBAAwB;AACY;AAC2C;AAC1F;AACA,WAAW,YAAY;AACvB;AACuD;AACvD;AACuE;AACvE,WAAW,kBAAkB;AACwB;AACrD,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA,6BAA6B,+DAAa;AAC1C;AACA;AACA;AACA,gBAAgB,+DAAe;AAC/B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,kEAAkB;AAClC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA;AACA,2BAA2B,gEAAc,EAAE,UAAU;AACrD;AACA;AACA,4BAA4B,yEAAwB;AACpD,wCAAwC,YAAY;AACpD;AACA;AACA,QAAQ,kFAAgC;AACxC,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAe;AACnC;AACA;AACA;AACA;AACA,0GAA0G,qBAAqB;AAC/H;AACA,SAAS;AACT;AACA;AACA,uBAAuB,6DAAW;AAClC;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB;AACnC,YAAY,0DAAmB,CAAC,8DAAkB;AAClD;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;ACrFY;AACc;AACtB;AACQ;AAC3B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,8BAA8B,kDAAQ;AACtC;AACA;AACA,kBAAkB,kCAAkC;AACpD;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB;AAC/B,iCAAiC,0DAAmB,CAAC,0CAAY,GAAG,eAAe;AACnF,QAAQ,0DAAmB,YAAY,+BAA+B;AACtE;AACO;AACP,gBAAgB,mDAAQ;AACxB,IAAI,mDAAQ,EAAE,0BAA0B;AACxC;;;;;;;;;;;;;;;;;;;;;ACxC4C;AACrC,aAAa;AACpB;AACA,uBAAuB,uBAAuB;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,2BAA2B;AAC3B;AACA;AACA,eAAe;AACf,IAAI;AACW;AACf,qBAAqB,+CAAQ;AAC7B,IAAI,gDAAS;AACb;AACA;AACA,KAAK;AACL;AACA","file":"lib_index_js-webpack_sharing_consume_default_react-dom.a6e7b3c05b989acbca7c.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345\n    }\n});\nexport default function ImgMediaCard(props) {\n    const classes = useStyles();\n    return (React.createElement(Card, { className: classes.root },\n        React.createElement(CardActionArea, null,\n            React.createElement(CardContent, null,\n                React.createElement(Typography, { gutterBottom: true, variant: \"h5\", component: \"h2\" }, props.title),\n                React.createElement(Typography, { variant: \"body2\", color: \"textSecondary\", component: \"p\" }, props.body)))));\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\n// import { InputDialog } from '@jupyterlab/apputils';\n// import * as Widgets from '@lumino/widgets';\nimport * as Icons from '@jupyterlab/ui-components';\n// import { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { systemNotification, NotificationCenter, addNotification } from './notifications';\n// import * as Y from 'yjs'\n// import { YDocument } from '@jupyterlab/shared-models';\n// // import Toast from 'react-bootstrap/Toast';\nimport { NotebookActions } from '@jupyterlab/notebook';\n// const store:React.Dispatch<any>[]  = []\nimport { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\n// import { NotebookActions } from '@jupyterlab/notebook';\nimport { ToolbarButton } from '@jupyterlab/apputils';\n// import { List } from '@material-ui/core';\n// const ydoc = YDocument.ydoc\n// ydoc.getArray('notif') .insert(0, [1, 2, 3])\nclass ButtonExtension {\n    createNew(panel, context) {\n        const mybutton = new ToolbarButton({\n            label: 'Push Notification',\n            onClick: () => {\n                // this.strEle.push(\"ayo\");\n                addNotification(\"newElement\");\n                document.addEventListener('DOMContentLoaded', () => {\n                    if (Notification.permission !== 'granted') {\n                        Notification.requestPermission();\n                    }\n                });\n                systemNotification('myTitle', 'myDesc', 'www.example.com');\n            }\n        });\n        // Add the toolbar button to the notebook toolbar\n        panel.toolbar.insertItem(10, 'mybutton', mybutton);\n        // The ToolbarButton class implements `IDisposable`, so the\n        // button is the extension for the purposes of this method.\n        return mybutton;\n    }\n}\n/**\n * Initialization data for the jupyterlab-todo extension.\n */\nconst plugin = {\n    id: 'jupyterlab-todo:plugin',\n    autoStart: true,\n    requires: [ICommandPalette],\n    activate: async (app, palette) => {\n        const content = new MyWidget();\n        const widget = new MainAreaWidget({ content });\n        widget.id = 'apod-jupyterlab';\n        widget.title.closable = true;\n        widget.title.icon = Icons.jupyterFaviconIcon;\n        app.shell.add(widget, 'right', { rank: 500 });\n        const your_button = new ButtonExtension();\n        app.docRegistry.addWidgetExtension('Notebook', your_button);\n        NotebookActions.executed.connect((_, args) => {\n            const { cell, notebook } = args;\n            const codeCell = cell.model.type === 'code';\n            const nonEmptyCell = cell.model.value.text.length > 0;\n            const metadata = cell.model.metadata;\n            if (codeCell && nonEmptyCell) {\n                if (metadata.has('execution')) {\n                    const notebookName = notebook.title.label.replace(/\\.[^/.]+$/, '');\n                    addNotification(notebookName);\n                }\n            }\n            else {\n                alert('Notebook Cell Timing needs to be enabled for Jupyterlab Notifications to work. ' +\n                    'Please go to Settings -> Advanced Settings Editor -> Notebook and update setting to {\"recordTiming\": true}');\n            }\n        });\n    }\n};\nclass MyWidget extends ReactWidget {\n    constructor() {\n        super();\n    }\n    render() {\n        return (React.createElement(\"div\", null,\n            React.createElement(NotificationCenter, null)));\n    }\n}\nexport default plugin;\n","import useStore from \"./useStore\";\nimport { setStore, getStore } from \"./useStore\";\nimport React from 'react';\nimport ImgMediaCard from \"./card\";\nexport function systemNotification(title, desc, url) {\n    if (Notification.permission !== 'granted') {\n        Notification.requestPermission();\n    }\n    else {\n        const notification = new Notification(title, {\n            icon: 'http://Your_Website.com/logo.png',\n            body: desc\n        });\n        /* Remove the notification from Notification Center when clicked.*/\n        notification.onclick = function () {\n            window.open(url);\n        };\n        /* Callback function when the notification is closed. */\n        notification.onclose = function () {\n            console.log('Notification closed');\n        };\n    }\n}\nexport function NotificationCenter(props) {\n    const [store, setStore] = useStore();\n    let handleClick = () => {\n        console.log(store);\n        setStore({ ls: [...store.ls, \"newElement\"] });\n        // const yarray = ydoc.getArray('notif')\n        // console.log(yarray.toArray(), \"yjs print\");\n        // ydoc.getArray('notif').insert(0, [6,7,8]);\n        // console.log(ydoc.getArray('notif').toArray(), \"print2\");\n    };\n    return (React.createElement(\"div\", null,\n        store.ls.map((image) => (React.createElement(ImgMediaCard, { title: image }))),\n        React.createElement(\"button\", { onClick: () => handleClick() }, \"Activate Lasers\")));\n}\nexport function addNotification(name) {\n    let store = getStore();\n    setStore({ ls: [...store.ls, name] });\n}\n","import { useState, useEffect } from \"react\";\nexport let store = { ls: [\"card1\", \"card2\"] };\nlet listeners = [];\n// setStore(store => ({...store, isFoo: false}))\nexport function setStore(val) {\n    if (typeof val === \"object\" && val !== null) {\n        store = val;\n    }\n    else {\n        store = val(store);\n    }\n    store = val;\n    listeners.forEach(l => l(val));\n}\nexport function getStore() {\n    return Object.assign({}, store);\n}\n// setStore(store => {\n//     return {...store }\n// })\nexport default function useStore() {\n    const listener = useState()[1];\n    useEffect(() => {\n        listeners.push(listener);\n        return () => void (listeners = listeners.filter(l => l === listener));\n    }, []);\n    return [store, setStore];\n}\n"],"sourceRoot":""}